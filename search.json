[{"title":"Java的反射","path":"/java-reflection/","content":"反射被视为动态语言的关键。Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。 反射的定义在Java中反射(Reflection)是一种Java 程序运行期间的动态技术，它可以在运行时(runtime)检査、修改其自身结构或行为。通过反射，程序可以访问、检测和修改它自己的类、对象、方法、属性等成员。即在运行状态中，对于任意一个类，都能够知道这个类的所以属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息及动态调用对象方法的功能叫Java的反射机制。 反射的作用 动态加载类:程序可以在运行时动态地加载类库中的类； 动态创建对象:反射可以基于类的信息，程序可以在运行时，动态创建对象实例; 调用方法:反射可以根据方法名称，程序可以在运行时，动态地调用对象的方法(即使方法在编写程序时还没有定义) 访问成员变量:反射可以根据成员变量名称，程序可以在运行时，访问和修改成员变量(反射可以访问私有成员变量) 运行时类型信息:反射允许程序在运行时，查询对象的类型信息，这对于编写通用的代码和库非常有用; 实现反射机制的类Java中主要由以下的类来实现Java反射机制（这些类都位于java.lang.reflect包中）： Class类：代表一个类。 Field类：代表类的成员变量（成员变量也称为类的属性）。 Method类：代表类的方法。 Constructor类：代表类的构造方法。 Array类：提供了动态创建数组，以及访问数组的元素的静态方法。 反射的基础使用获取Class对象反射的第一步是获取 Class 对象(动态加载类)。Class 对象表示某个类的元数据，可以通过以下几种方式获取： 12345678//方式1:通过类名Class stringClass1 = String.class;//方式2：通过Class类的forName()方法Class stringClass2 = Class.forName(&quot;java.lang.String&quot;); //方式3：通过对象调用getClass()方法Class stringClass3 = &quot;&quot;.getClass(); 解析字符串为Java对象使用fastjson的JSON类解析一个字符串为Java对象，并输出该对象的字段值。 1234567891011121314151617import com.alibaba.fastjson.JSON;import lombok.Data;public class ReflectionTest &#123; public static void main(String[] args) &#123; String demoStr = &quot;&#123;\\&quot;age\\&quot;:18,\\&quot;name\\&quot;:\\&quot;demo1\\&quot;&#125;&quot;; Demo demo = JSON.parseObject(demoStr, Demo.class); System.out.printf(&quot;name is : %s%n&quot;, demo.getName()); System.out.printf(&quot;age is : %s%n&quot;, demo.getAge()); &#125;&#125;@Dataclass Demo &#123; private String name; private Integer age;&#125; 输出 12name is : demo1age is : 18 获取类的相关信息通过 Class 对象在运行时获取一个类的相关信息，包括类名、包名、成员变量（字段）、成员方法等。 123456789101112131415161718192021222324252627282930import java.lang.reflect.*;public class ReflectionTest2 &#123; public static void main(String[] args) throws ClassNotFoundException &#123; Class clz = Class.forName(&quot;java.util.HashMap&quot;); //获取类名 System.out.println(&quot;完全限定名：&quot; + clz.getName()); System.out.println(&quot;简单的类名：&quot; + clz.getSimpleName()); //获取包名 System.out.println(&quot;package&quot; + clz.getPackage().getName()); System.out.println(); //获取成员变量 Field[] fieldArray = clz.getDeclaredFields(); System.out.println(&quot;成员变量(字段)&quot;); for (Field field : fieldArray) &#123; System.out.println(field); &#125; System.out.println(); //获取成员方法 Method[] methodArray = clz.getDeclaredMethods(); System.out.println(&quot;成员方法&quot;); for (Method method : methodArray) &#123; System.out.println(method); &#125; &#125;&#125; 通过反射创建对象通过反身创建对象，通过反射获取方法，通过反射执行方法等。 1234567891011121314151617181920212223242526import lombok.SneakyThrows;import java.lang.reflect.Method;public class ReflectionTest3 &#123; @SneakyThrows public static void main(String[] args) &#123; //获取class对象 Class&lt;Demo&gt; clazz = Demo.class; //获取Demo class 的setName 方法 Method setName = clazz.getMethod(&quot;setName&quot;, String.class); //获取Demo class 的实例 Demo demo = clazz.newInstance(); //在实例化后的对象demo执行setName方法 setName.invoke(demo, &quot;new Name&quot;); //获取name并输出 System.out.printf(&quot;demo name is : %s%n&quot;, demo.getName()); //通过反射在demo对象执行getName Method getName = clazz.getMethod(&quot;getName&quot;); System.out.printf(&quot;demo reflect getname is : %s%n&quot;, getName.invoke(demo)); //通过反射在其它demo对象上执行getName Demo demo2 = new Demo(); demo2.setName(&quot;demo2&quot;); System.out.printf(&quot;demo2 reflect getname is : %s%n&quot;, getName.invoke(demo2)); &#125;&#125; 输出 123demo name is : new Namedemo reflect getname is : new Namedemo2 reflect getname is : demo2 反射的性能问题反射虽然功能强大，但由于是在运行时动态操作类，因此性能相对较低。此外，反射也会破坏封装性，使用时要谨慎。 反射的安全性使用反射时需要注意安全问题，因为它可以绕过Java的访问控制机制。例如，可以访问私有字段或方法，因此在开发中使用反射要特别小心。甚至在运行时，添加、改变方法。 反射的常见场景 框架开发：如 Spring 中的依赖注入、Hibernate 中的 ORM 等。 调试工具：如 Java 的调试器、分析工具等。 动态代理：在 Java 中，动态代理依赖于反射。 常用的fastjson JSONObject.parseObject(xxStr)","tags":["java"],"categories":["技术"]},{"title":"Java的学习","path":"/java-hello-world/","content":"Java并不算是一个好学的语言，感觉主要原因是： 1. 思维的转变，比如面向对象； 2. 配置复杂，虽然现在一些配置尽可能简单，对于初学者还是没有达到开箱即用的地步； 3. 及时反馈，这点相对于一些前端语言，可以及时的看到效果； 4. 扩展性强，导致要了解学习的内容过多。 面向对象Java和其它语言很大一个不同就是面向对象。理解类和对象基本就行了，比如人是一个类，具体张三是人这个类的对象，李四是人这类的另一个对象；动物是一个类，猫是动物的一个对象，狗是动物的另一个对象。 张三具有行走的方法，猫也具有行走的方法。 简单理解面向过程和面向对象的方式就是： 面向过程就是从第一行依次执行到最后一行； 面向对象是把现实问题抽象出来，把某一类定义为一个类，类具有它自己的方法。 设计模式很多语言都会有一些设计模式，或者说语言在设计的时候本来就有很多设计的模式在里面，只是感觉Java把这些凸显的更加明显。想要理解一些代码，掌握编程的思想，设计的模式是必不可少的。比如 单例模式、工厂模式、接口适配器模式、策略模式 等等。 这些模式没必要完全记住其概念，但是一定要熟悉了解，主要还是在于思维的转变，从平常日常生活思考问题的思维转变成编程思维。其实有时候很多设计模式在用，自己却浑然不知。 Java基础Java基础主要 基本语法、基本数据结构、类、对象、接口、继承、多态 等。然后就是一些框架的学习运用，解决问题的思路和方法。 Java进阶进阶一些内容有多线程、并发编程、反射、泛型、注解、web开发、Spring及Spring Boot等。 Java高级进阶一些内容有分布式、高并发处理、相关中间件学习（消息队列、缓存系统、数据库中间件、搜索引擎、RPC框架）、封装、异常处理、日志管理、系统平衡 等等。 Java学习是一个长期持久的过程，每一段时间对于同样的问题都会有不同的见解； 有很多个时候都会那种恍然大悟的感觉；另外一个感觉是完全学不完。","tags":["java"],"categories":["技术"]},{"title":"112334","path":"/112334/","content":"233fkfkfdafdaj","tags":["test"],"categories":["tech"]},{"title":"112334666","path":"/test-tech-1/","content":"233fkfkfdafdaj","tags":["test"],"categories":["tech"]},{"title":"Hello World","path":"/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"国庆xx旅游(占位)","path":"/life/play1.html","content":"从这里开始"},{"title":"思考1","path":"/life/think1.html","content":"从这里开始"},{"title":"生活","path":"/life/index.html","content":"从这里开始"},{"title":"码农的生活","path":"/life/coder.html","content":"从这里开始","tags":[null,null]},{"title":"码农的生活","path":"/photo/coder.html","content":"从这里开始","tags":[null,null]},{"title":"生活","path":"/photo/index.html","content":"从这里开始"},{"title":"思考1","path":"/photo/think1.html","content":"从这里开始"},{"title":"国庆xx旅游(占位)","path":"/photo/play1.html","content":"从这里开始"},{"title":"关于","path":"/about/index.html","content":"想着用文字的方式记录一些东西 学习笔记偶尔看到一些新的技术或者正在学习的东西，包括不限于编程技术。 技术整理温帮而知新，更想的是把之前的内容查漏补缺，表达是对所学知识很好的一种更固方法 生活分享可以旅游，可以生活感悟，可以发呆.. 站点信息主要为了方便和便宜，就用hexo 和 github pages 来维护。 基本就一个域名的费用。 搭建配置域名熟悉一点大概2小时。 框架：Hexo主题： Stellar插件： hexo-admin、hexo-deployer-git、hexo-generator-cname服务器：github pages"},{"title":"开始2","path":"/wiki/database/examples.html","content":"test"},{"title":"开始1","path":"/wiki/database/index.html","content":"test"},{"title":"开始3","path":"/wiki/database/pages.html","content":"test"},{"title":"开始4","path":"/wiki/database/releases.html","content":"test"},{"title":"开始5","path":"/wiki/database/theme-settings.html","content":"test"},{"title":"开始","path":"/wiki/java/index.html","content":"test"}]